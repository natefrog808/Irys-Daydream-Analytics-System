# Environment Variables Configuration

## Base Configuration
```env
# Save as: .env.example

# Core Settings
NODE_ENV=development
PORT=3000
API_VERSION=v1
DEBUG_MODE=true

# Security
JWT_SECRET=your-jwt-secret-key
JWT_EXPIRY=24h
API_KEY=your-api-key
API_SECRET=your-api-secret

# LLM Configuration
GROQ_API_KEY=your-groq-api-key
LLM_MODEL=deepseek-r1-distill-llama-70b
LLM_TEMPERATURE=0.7
LLM_MAX_TOKENS=2048

# Blockchain Configuration
IRYS_NODE=https://node1.irys.xyz
IRYS_PRIVATE_KEY=your-irys-private-key
BLOCKCHAIN_NETWORK=mainnet
MAX_RETRIES=3
CONFIRMATION_BLOCKS=6

# Database Configuration
DATABASE_URL=postgresql://user:password@localhost:5432/nexus_stream
REDIS_URL=redis://localhost:6379
CACHE_TTL=3600

# Streaming Configuration
MAX_STREAMS=100
STREAM_BATCH_SIZE=1000
DATA_RETENTION_DAYS=30
UPDATE_INTERVAL=1000

# Performance Settings
MAX_CONNECTIONS=1000
RATE_LIMIT_WINDOW=900000
RATE_LIMIT_MAX=100
MEMORY_LIMIT=4096

# Monitoring
ENABLE_METRICS=true
METRICS_PORT=9090
LOG_LEVEL=info
ALERT_EMAIL=alerts@your-domain.com

# Feature Flags
ENABLE_PREDICTIONS=true
ENABLE_BLOCKCHAIN=true
ENABLE_REALTIME=true
ENABLE_ANALYTICS=true

# WebSocket Configuration
WS_PORT=3001
WS_HEARTBEAT_INTERVAL=30000
WS_MAX_CONNECTIONS=1000

# AI Settings
AI_BATCH_SIZE=32
AI_CONFIDENCE_THRESHOLD=0.8
AI_UPDATE_INTERVAL=5000
AI_MEMORY_WINDOW=1000

# Storage Configuration
STORAGE_TYPE=s3
STORAGE_BUCKET=nexus-stream-data
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_REGION=us-east-1

# Email Configuration
SMTP_HOST=smtp.your-provider.com
SMTP_PORT=587
SMTP_USER=your-smtp-user
SMTP_PASS=your-smtp-password
EMAIL_FROM=noreply@your-domain.com
```

## Environment-Specific Configurations

### Development
```env
# Save as: .env.development

NODE_ENV=development
DEBUG_MODE=true
LOG_LEVEL=debug
ENABLE_METRICS=true

# Development Database
DATABASE_URL=postgresql://dev:dev@localhost:5432/nexus_stream_dev
REDIS_URL=redis://localhost:6379

# Reduced Limits
RATE_LIMIT_MAX=1000
MEMORY_LIMIT=2048
MAX_STREAMS=10
```

### Testing
```env
# Save as: .env.test

NODE_ENV=test
DEBUG_MODE=true
LOG_LEVEL=debug
ENABLE_METRICS=false

# Test Database
DATABASE_URL=postgresql://test:test@localhost:5432/nexus_stream_test
REDIS_URL=redis://localhost:6379

# Test Settings
RATE_LIMIT_MAX=10000
MEMORY_LIMIT=1024
MAX_STREAMS=5
```

### Production
```env
# Save as: .env.production

NODE_ENV=production
DEBUG_MODE=false
LOG_LEVEL=warn
ENABLE_METRICS=true

# Production Database
DATABASE_URL=postgresql://prod:prod@prod-db.internal:5432/nexus_stream_prod
REDIS_URL=redis://prod-redis.internal:6379

# Enhanced Security
JWT_EXPIRY=12h
RATE_LIMIT_MAX=100
CONFIRMATION_BLOCKS=12
```

## Usage in Code

```typescript
// Save as: src/config/env.ts

import { z } from 'zod';
import dotenv from 'dotenv';

// Load appropriate .env file based on NODE_ENV
dotenv.config({
  path: `.env.${process.env.NODE_ENV || 'development'}`
});

// Environment variable validation schema
const envSchema = z.object({
  // Core Settings
  NODE_ENV: z.enum(['development', 'test', 'production']),
  PORT: z.string().transform(Number),
  API_VERSION: z.string(),
  DEBUG_MODE: z.string().transform(Boolean),

  // Security
  JWT_SECRET: z.string(),
  API_KEY: z.string(),

  // LLM Configuration
  GROQ_API_KEY: z.string(),
  LLM_MODEL: z.string(),

  // Blockchain Configuration
  IRYS_NODE: z.string().url(),
  IRYS_PRIVATE_KEY: z.string(),

  // Add other validations as needed...
});

// Validate and export environment variables
try {
  const env = envSchema.parse(process.env);
  export default env;
} catch (error) {
  console.error('Invalid environment variables:', error);
  process.exit(1);
}
```

## Environment Variable Management

### Local Development
1. Copy `.env.example` to `.env.development`
2. Update variables with your local configuration
3. Never commit `.env` files to version control

### Production Deployment
1. Use secure secrets management system
2. Rotate sensitive credentials regularly
3. Use different values for each environment

### Security Considerations
1. Use strong, unique values for secrets
2. Restrict access to production credentials
3. Regularly audit environment variables
4. Use encryption for sensitive values

### Best Practices
1. Document all environment variables
2. Use meaningful default values
3. Validate variables at startup
4. Use type-safe configurations

## Required Setup Steps

1. Initial Setup:
```bash
# Copy example config
cp .env.example .env.development

# Generate JWT secret
openssl rand -base64 32 > .jwt-secret

# Generate API keys
node scripts/generate-api-keys.js
```

2. Update Configuration:
- Update database credentials
- Set API keys and secrets
- Configure blockchain settings
- Set up monitoring endpoints

3. Verify Configuration:
```bash
# Validate environment
npm run validate-env

# Test configuration
npm run test:config
```

4. Production Deployment:
- Use secure secrets management
- Enable production security features
- Configure monitoring and alerts
- Set up backup systems
